type CounterEntity @entity {
  id: ID!
  #specific counters
  parameterUpdatedEventCount: BigInt!
  rewardsDenylistUpdatedEventCount: BigInt!
  newSubgraphPublishedEventCount: BigInt!
  newSubgraphVersionPublishedEventCount: BigInt!
  subgraphMetadataUpdatedEventCount: BigInt!
  subgraphVersionMetadataUpdatedEventCount: BigInt!
  subgraphDeprecatedEventCount: BigInt!
  subgraphNameSignalEnabledEventCount: BigInt!
  indexerServiceRegisteredEventCount: BigInt!
  indexerServiceUnregisteredEventCount: BigInt!
  setDefaultNameEventCount: BigInt!
  delegationParametersUpdatedEventCount: BigInt!
  setOperatorEventCount: BigInt!
  indexerStakeDepositedEventCount: BigInt!
  indexerStakeLockedEventCount: BigInt!
  indexerStakeWithdrawnEventCount: BigInt!
  indexerStakeSlashedEventCount: BigInt!
  allocationCreatedEventCount: BigInt!
  allocationCollectedEventCount: BigInt!
  allocationClosedEventCount: BigInt!
  rebateClaimedEventCount: BigInt!
  nSignalMintedEventCount: BigInt!
  nSignalBurnedEventCount: BigInt!
  grtWithdrawnEventCount: BigInt!
  signalMintedEventCount: BigInt!
  signalBurnedEventCount: BigInt!
  delegatorStakeDepositedEventCount: BigInt!
  delegatorStakeLockedEventCount: BigInt!
  delegatorStakeWithdrawnEventCount: BigInt!
  #L2 transfer tools
  delegationTransferredToL2EventCount: BigInt!
  indexerStakeTransferredToL2EventCount: BigInt!
  stakeDelegatedUnlockedDueToL2TransferEventCount: BigInt!
  transferredDelegationReturnedToDelegatorEventCount: BigInt!
  subgraphSentToL2EventCount: BigInt!
  curatorBalanceSentToL2EventCount: BigInt!
  subgraphReceivedFromL1EventCount: BigInt!
  subgraphL2TransferFinalizedEventCount: BigInt!
  curatorBalanceReceivedEventCount: BigInt!
  curatorBalanceReturnedToBeneficiaryEventCount: BigInt!
  subgraphTransferredEventCount: BigInt!
  #interface counters
  eventCount: BigInt!
  subgraphEventCount: BigInt!
  subgraphDeploymentEventCount: BigInt!
  graphAccountEventCount: BigInt!
  indexerEventCount: BigInt!
  curatorEventCount: BigInt!
  delegatorEventCount: BigInt!
}

type GraphAccount @entity {
  "Graph account ID"
  id: ID!

  # Staking and Curating and Delegating
  "Curator fields for this GraphAccount. Null if never curated"
  curator: Curator @derivedFrom(field: "account")
  "Indexer fields for this GraphAccount. Null if never indexed"
  indexer: Indexer @derivedFrom(field: "account")
  "Delegator fields for this GraphAccount. Null if never delegated"
  delegator: Delegator @derivedFrom(field: "account")
}

type Subgraph @entity {
  "Subgraph ID - which is derived from the Organization/Individual graph accountID"
  id: ID!
  "Graph account that owns this subgraph"
  owner: GraphAccount!
  "Current version"
  currentVersion: SubgraphVersion
  "List of all the subgraph versions included the current one"
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraph")
  "Version counter"
  versionCount: BigInt!
  "Auxiliary field to workaround some limitations"
  initializing: Boolean!

  events: [SubgraphEvent!]! @derivedFrom(field: "subgraph")
}

type SubgraphVersion @entity {
  "Concatenation of subgraph, subgraph deployment, and version ID"
  id: ID!
  "Subgraph of this version"
  subgraph: Subgraph!
  "Subgraph deployment of this version"
  subgraphDeployment: SubgraphDeployment!
  "Version number"
  version: Int!
}

type SubgraphDeployment @entity {
  "Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes"
  id: ID!
  "IPFS hash of the subgraph manifest"
  ipfsHash: String!
  "The versions this subgraph deployment relates to"
  versions: [SubgraphVersion!]! @derivedFrom(field: "subgraphDeployment")
}

type Indexer @entity {
  "Eth address of Indexer"
  id: ID!
  "Graph account of this indexer"
  account: GraphAccount!

  "Active allocations of stake for this Indexer"
  allocations: [Allocation!]! @derivedFrom(field: "activeForIndexer")
  "All allocations of stake for this Indexer (i.e. closed and active)"
  totalAllocations: [Allocation!]! @derivedFrom(field: "indexer")

  "Delegators to this Indexer"
  delegators: [DelegatedStake!]! @derivedFrom(field: "indexer")
}

type Allocation @entity {
  "Channel Address"
  id: ID!
  "Indexer of this allocation"
  indexer: Indexer!
  "Creator of the allocation - can be the operator or the indexer"
  creator: Bytes!
  "If the Allocation is active it shows the indexer. If closed equals null"
  activeForIndexer: Indexer
  "Subgraph deployment that is being allocated to"
  subgraphDeployment: SubgraphDeployment!
}

type Delegator @entity {
  "Delegator address"
  id: ID!
  "Graph account of the delegator"
  account: GraphAccount!
  "Stakes of this delegator"
  stakes: [DelegatedStake!]! @derivedFrom(field: "delegator")
}

type DelegatedStake @entity {
  "Concatenation of Delegator address and Indexer address"
  id: ID!
  "Index the stake is delegated to"
  indexer: Indexer!
  "Delegator"
  delegator: Delegator!
}

type Curator @entity {
  "Eth address of the Curator"
  id: ID!
  "Graph account of this curator"
  account: GraphAccount!
}

type Dispute @entity {
  "Dispute ID"
  id: ID!
  "Subgraph deployment being disputed"
  subgraphDeployment: SubgraphDeployment!
  "Fisherman address"
  fisherman: GraphAccount!
  "Indexer disputed"
  indexer: GraphAccount!
}

# Events

interface Event {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!

  #epoch: Epoch #Probably re-add epoch later
}

type ParameterUpdatedEvent implements Event @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  parameter: String!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

# Subgraph related events

interface SubgraphEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  subgraph: Subgraph!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

interface SubgraphDeploymentEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  deployment: SubgraphDeployment!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type RewardsDenylistUpdatedEvent implements SubgraphDeploymentEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  deployment: SubgraphDeployment!

  deniedAt: Int!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type NewSubgraphPublishedEvent implements SubgraphEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  version: SubgraphVersion!

  deployment: SubgraphDeployment!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type NewSubgraphVersionPublishedEvent implements SubgraphEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  version: SubgraphVersion!

  deployment: SubgraphDeployment!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphMetadataUpdatedEvent implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  ipfsFileHash: String!

  metadata: SubgraphMetadata

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphMetadata @entity(immutable: true) {
  "Subgraph metadata ipfs hash"
  id: ID!
  "Subgraph that reference this metadata. For compatibility purposes. For the full list use subgraphs"
  subgraph: SubgraphMetadataUpdatedEvent @derivedFrom(field: "metadata")
  "Subgraphs that reference this metadata"
  subgraphs: [SubgraphMetadataUpdatedEvent!]! @derivedFrom(field: "metadata")
  "Short description of the subgraph"
  description: String
  "Image in string format"
  image: String
  "NFT Image representation"
  nftImage: String
  "Location of the code for this project"
  codeRepository: String
  "Projects website"
  website: String
  "Display name"
  displayName: String
  "Categories that the subgraph belongs to."
  categories: [String!]
}

type SubgraphVersionMetadataUpdatedEvent implements SubgraphEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  deployment: SubgraphDeployment!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  ipfsFileHash: String!

  metadata: SubgraphVersionMetadata

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphVersionMetadata @entity(immutable: true) {
  "Subgraph version metadata ipfs hash"
  id: ID!
  "SubgraphVersion entity that references this metadata. For compatibility purposes. For the full list use subgraphVersions"
  subgraphVersion: SubgraphVersionMetadataUpdatedEvent @derivedFrom(field: "metadata")
  "SubgraphVersion entities that reference this metadata"
  subgraphVersions: [SubgraphVersionMetadataUpdatedEvent!]! @derivedFrom(field: "metadata")
  "Short description of the version"
  description: String
  "Semantic versioning label"
  label: String
}

type SubgraphDeprecatedEvent implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphNameSignalEnabledEvent implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphSentToL2Event implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  l1Owner: GraphAccount!

  l2Owner: GraphAccount!

  amountTransferred: BigInt!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphReceivedFromL1Event implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  owner: GraphAccount!

  l1Subgraph: Subgraph!

  l2Subgraph: Subgraph!

  amountTransferred: BigInt!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphL2TransferFinalizedEvent implements SubgraphEvent & Event @entity(immutable: true) {
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SubgraphTransferred implements SubgraphEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  "User that triggered the Event"
  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

# Profile events (includes Indexer, Curator and Delegator events)

interface GraphAccountEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

# Indexer events

interface IndexerEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  indexer: Indexer!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerServiceRegisteredEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  url: String!

  geoHash: String!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerServiceUnregisteredEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SetDefaultNameEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  newDefaultName: String!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type DelegationParametersUpdatedEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  indexingRewardCut: Int!

  queryFeeCut: Int!

  cooldownBlocks: Int!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SetOperatorEvent implements IndexerEvent & GraphAccountEvent & Event @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  operator: Bytes!

  allowed: Boolean!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerStakeDepositedEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  amount: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerStakeLockedEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  amount: BigInt!

  lockedUntil: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerStakeWithdrawnEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  amount: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerStakeSlashedEvent implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  "Total amount of the indexer stake that was slashed"
  amountSlashed: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type AllocationCreatedEvent implements IndexerEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  "ID of the allocation created"
  allocation: String!

  allocatedAmount: BigInt!

  deployment: SubgraphDeployment!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type AllocationCollectedEvent implements IndexerEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  "ID of the allocation created"
  allocation: String!

  deployment: SubgraphDeployment!

  collectedQueryFees: BigInt!

  curatorQueryFees: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type AllocationClosedEvent implements IndexerEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  "ID of the allocation created"
  allocation: String!

  deployment: SubgraphDeployment!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type RebateClaimedEvent implements IndexerEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  accounts: [GraphAccount!]!

  "ID of the allocation created"
  allocation: String!

  deployment: SubgraphDeployment!

  indexerQueryFeeRebates: BigInt!

  delegatorQueryFeeRebates: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type IndexerStakeTransferredToL2Event implements IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  l1Indexer: Indexer!

  l2Indexer: Indexer!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

# Curator events

interface CuratorEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  curator: Curator!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type NSignalMintedEvent implements SubgraphEvent & CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  curator: Curator!

  accounts: [GraphAccount!]!

  "ID of the corresponding NameSignal entity on the core subgraph"
  nameSignalId: String!

  nameSignal: BigInt!

  versionSignal: BigInt!

  tokens: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type NSignalBurnedEvent implements SubgraphEvent & CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  curator: Curator!

  accounts: [GraphAccount!]!

  "ID of the corresponding NameSignal entity on the core subgraph"
  nameSignalId: String!

  nameSignal: BigInt!

  versionSignal: BigInt!

  "Tokens received after burning the NameSignal"
  tokens: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type GRTWithdrawnEvent implements SubgraphEvent & CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  subgraph: Subgraph!

  curator: Curator!

  accounts: [GraphAccount!]!

  "ID of the corresponding NameSignal entity on the core subgraph"
  nameSignalId: String!

  nameSignal: BigInt!

  "Tokens received after burning the NameSignal"
  tokens: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SignalMintedEvent implements CuratorEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  deployment: SubgraphDeployment!

  curator: Curator!

  accounts: [GraphAccount!]!

  "ID of the corresponding Signal entity on the core subgraph"
  signalId: String!

  versionSignal: BigInt!

  tokens: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type SignalBurnedEvent implements CuratorEvent & SubgraphDeploymentEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  deployment: SubgraphDeployment!

  curator: Curator!

  accounts: [GraphAccount!]!

  "ID of the corresponding Signal entity on the core subgraph"
  signalId: String!

  versionSignal: BigInt!

  "Tokens received after burning the NameSignal"
  tokens: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type CuratorBalanceSentToL2Event implements CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  curator: Curator!

  l1CuratorAccount: GraphAccount!

  l2BeneficiaryAccount: GraphAccount!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type CuratorBalanceReceivedEvent implements CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  curator: Curator!

  l1Subgraph: Subgraph!

  l2Subgraph: Subgraph!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type CuratorBalanceReturnedToBeneficiaryEvent implements CuratorEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  curator: Curator!

  l1Subgraph: Subgraph!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

# Delegator events

interface DelegatorEvent {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  #epoch: Epoch #Probably re-add epoch later

  delegator: Delegator!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type DelegatorStakeDepositedEvent implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  accounts: [GraphAccount!]!

  tokenAmount: BigInt!

  shareAmount: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type DelegatorStakeLockedEvent implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  accounts: [GraphAccount!]!

  tokenAmount: BigInt!

  shareAmount: BigInt!

  lockedUntil: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type DelegatorStakeWithdrawnEvent implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  accounts: [GraphAccount!]!

  tokenAmount: BigInt!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type DelegationTransferredToL2Event implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  l1Indexer: Indexer!

  l2Indexer: Indexer!

  l1Delegator: Delegator!

  l2Delegator: Delegator!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type StakeDelegatedUnlockedDueToL2TransferEvent implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}

type TransferredDelegationReturnedToDelegatorEvent implements DelegatorEvent & IndexerEvent & GraphAccountEvent & Event
  @entity(immutable: true) {
  "Generic ID only for uniqueness purposes."
  id: ID!

  timestamp: BigInt!

  blockNumber: BigInt!

  tx_hash: Bytes!

  typename: String!

  indexer: Indexer!

  delegator: Delegator!

  amountTransferred: BigInt!

  accounts: [GraphAccount!]!

  tx_gasLimit: BigInt!

  tx_gasPrice: BigInt!

  tx_gasUsed: BigInt!

  tx_cumulativeGasUsed: BigInt!
}
